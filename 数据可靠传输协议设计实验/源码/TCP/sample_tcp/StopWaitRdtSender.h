#ifndef STOP_WAIT_RDT_SENDER_H
#define STOP_WAIT_RDT_SENDER_H
#include "RdtSender.h"
#include <queue>
class StopWaitRdtSender :public RdtSender
{
private:
	int expectSequenceNumberSend;	// 下一个发送序号
	bool waitingState;				// 是否处于等待Ack的状态
	Packet packetWaitingAck;		//已发送并等待Ack的数据包
	int base;						//窗口基序号
	int tail;						//如果要加入一个数据，将会放入的数组位置的编号
	int winsize;					//窗口大小
	int ack_cnt;					//冗余ack数目
	Packet packet_queue[Configuration::MOD];		//缓存发送且未确认数据
public:

	bool getWaitingState();
	bool send(const Message &message);						//发送应用层下来的Message，由NetworkServiceSimulator调用,如果发送方成功地将Message发送到网络层，返回true;如果因为发送方处于等待正确确认状态而拒绝发送Message，则返回false
	void receive(const Packet &ackPkt);						//接受确认Ack，将被NetworkServiceSimulator调用	
	void timeoutHandler(int seqNum);					//Timeout handler，将被NetworkServiceSimulator调用
	void ack3Handler();									//三次冗余ack处理程序
public:
	StopWaitRdtSender();
	virtual ~StopWaitRdtSender();
};

#endif

